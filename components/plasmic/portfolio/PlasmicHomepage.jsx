/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 97MbGMxsXsF5gjCjjz3B5V
// Component: jhdZdNvuxuM
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: jbgHgwnt8sB/component
import ButtonMain from "../../ButtonMain"; // plasmic-import: rtKQ4fFMEB/component
import BenefitPainPoint from "../../BenefitPainPoint"; // plasmic-import: SpShSfmOXS/component
import { useScreenVariants as useScreenVariantsnuJkasGnoEh0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nuJkasGnoEH0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 97MbGMxsXsF5gjCjjz3B5V/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: jhdZdNvuxuM/css
import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: eSVlDPyOQ9/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: kBIgGqlJ-jDO/icon
import PartnerSiemensIcon from "./icons/PlasmicIcon__PartnerSiemens"; // plasmic-import: nT6uc56Izp/icon
import PartnerAdidasIcon from "./icons/PlasmicIcon__PartnerAdidas"; // plasmic-import: ZgIgUnVnNo/icon
import PartnerContinentalIcon from "./icons/PlasmicIcon__PartnerContinental"; // plasmic-import: OSgC9vbcAk/icon
import PartnerBvgIcon from "./icons/PlasmicIcon__PartnerBvg"; // plasmic-import: uxM8e9cy11/icon
import PartnerHaconIcon from "./icons/PlasmicIcon__PartnerHacon"; // plasmic-import: IEXgbMey7C/icon
import PartnerSoviIcon from "./icons/PlasmicIcon__PartnerSovi"; // plasmic-import: 2MYlHVfrzG/icon
import PartnerConcordiaIcon from "./icons/PlasmicIcon__PartnerConcordia"; // plasmic-import: tJN0WF8tHX/icon
import PartnerMobielIcon from "./icons/PlasmicIcon__PartnerMobiel"; // plasmic-import: XCDc5nKRot/icon
import PartnerWabcoIcon from "./icons/PlasmicIcon__PartnerWabco"; // plasmic-import: 8wFd_LINtC/icon
import PartnerAuerswaldIcon from "./icons/PlasmicIcon__PartnerAuerswald"; // plasmic-import: _nskE4A0sG/icon
import PartnerStDupontIcon from "./icons/PlasmicIcon__PartnerStDupont"; // plasmic-import: qVETjt-7dD/icon
import PartnerGenoakademieIcon from "./icons/PlasmicIcon__PartnerGenoakademie"; // plasmic-import: K67i_mBp_5/icon
import PartnerGuidoMariaKretschmerIcon from "./icons/PlasmicIcon__PartnerGuidoMariaKretschmer"; // plasmic-import: yI4OzDHF1P/icon

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnuJkasGnoEh0()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.home
          )}
        >
          <Stack__
            as={"section"}
            data-plasmic-name={"headerOld"}
            data-plasmic-override={overrides.headerOld}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerOld)}
          >
            <LogoIcon
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aen4T
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Abdulaziz Coskun"}
                  </span>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Abdulaziz Coskun"}
                  </span>
                </React.Fragment>
              )}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mqv9O)}
            >
              <Icon4Icon
                data-plasmic-name={"logo2"}
                data-plasmic-override={overrides.logo2}
                className={classNames(projectcss.all, sty.logo2)}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
                role={"img"}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__doZcC)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__w4Ku0
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToCases"] = true
                      ? (() => {
                          const actionArgs = { destination: `/cases` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToCases"] != null &&
                      typeof $steps["goToCases"] === "object" &&
                      typeof $steps["goToCases"].then === "function"
                    ) {
                      $steps["goToCases"] = await $steps["goToCases"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"Cases"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___2Y9Ds
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"About me"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___9Yc4B
                  )}
                  component={Link}
                  href={""}
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToMailtoHiAcoskunCom"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: "mailto:hi@acoskun.com"
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToMailtoHiAcoskunCom"] != null &&
                      typeof $steps["goToMailtoHiAcoskunCom"] === "object" &&
                      typeof $steps["goToMailtoHiAcoskunCom"].then ===
                        "function"
                    ) {
                      $steps["goToMailtoHiAcoskunCom"] = await $steps[
                        "goToMailtoHiAcoskunCom"
                      ];
                    }
                  }}
                  platform={"nextjs"}
                  title={"Write an email to Abdulaziz."}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__dFcLt)}
                  >
                    {"Let's talk"}
                  </Button>
                </PlasmicLink__>
              </Stack__>
            </Stack__>
          </Stack__>
          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <h1
              data-plasmic-name={"heroTItle"}
              data-plasmic-override={overrides.heroTItle}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.heroTItle
              )}
            >
              {
                "Crafting scalable experiences that build trust, boost retention, and accelerate growth "
              }
            </h1>
            <p
              data-plasmic-name={"heroIntro"}
              data-plasmic-override={overrides.heroIntro}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.heroIntro
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Seamlessly align both your customers' needs & your business objectives to deliver an enhanced experience.\n\n\u2014 App (iOS, android, web)\n\u2014 SaaS\n\u2014 Design System"
                : "Helping startups & companies create products customers truly love and use. Seamlessly aligning customers' needs & business objectives. \n\n\u2014 App (iOS, android, web)\n\u2014 SaaS\n\u2014 Design System"}
            </p>
            <div
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(projectcss.all, sty.button)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__utKUh
                )}
                component={Link}
                href={""}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToMailtoHiAcoskunCom"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "mailto:hi@acoskun.com"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToMailtoHiAcoskunCom"] != null &&
                    typeof $steps["goToMailtoHiAcoskunCom"] === "object" &&
                    typeof $steps["goToMailtoHiAcoskunCom"].then === "function"
                  ) {
                    $steps["goToMailtoHiAcoskunCom"] = await $steps[
                      "goToMailtoHiAcoskunCom"
                    ];
                  }
                }}
                platform={"nextjs"}
                title={"Write an email to Abdulaziz."}
              >
                <ButtonMain
                  className={classNames(
                    "__wab_instance",
                    sty.buttonMain__bHk6G
                  )}
                />
              </PlasmicLink__>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___5Tj7F)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/portfolio/images/dotsDecorationPng.png",
                fullWidth: 2275,
                fullHeight: 2275,
                aspectRatio: undefined
              }}
            />
          </section>
          <Stack__
            as={"div"}
            data-plasmic-name={"partnersTop"}
            data-plasmic-override={overrides.partnersTop}
            hasGap={true}
            className={classNames(projectcss.all, sty.partnersTop)}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__mDcPg
              )}
            >
              {"We made great things together"}
            </h6>
            <Stack__
              as={"div"}
              data-plasmic-name={"logos"}
              data-plasmic-override={overrides.logos}
              hasGap={true}
              className={classNames(projectcss.all, sty.logos)}
            >
              <PartnerSiemensIcon
                className={classNames(projectcss.all, sty.svg__aIog)}
                role={"img"}
              />

              <PartnerAdidasIcon
                className={classNames(projectcss.all, sty.svg__gbg46)}
                role={"img"}
              />

              <PartnerContinentalIcon
                className={classNames(projectcss.all, sty.svg__rfbYw)}
                role={"img"}
              />

              <PartnerBvgIcon
                className={classNames(projectcss.all, sty.svg__rIhdR)}
                role={"img"}
              />

              <PartnerHaconIcon
                className={classNames(projectcss.all, sty.svg___5Nibj)}
                role={"img"}
              />

              <PartnerSoviIcon
                className={classNames(projectcss.all, sty.svg___4U43H)}
                role={"img"}
              />

              <PartnerConcordiaIcon
                className={classNames(projectcss.all, sty.svg__qr2DZ)}
                role={"img"}
              />

              <PartnerMobielIcon
                className={classNames(projectcss.all, sty.svg__f9GsL)}
                role={"img"}
              />

              <PartnerWabcoIcon
                className={classNames(projectcss.all, sty.svg__klxmf)}
                role={"img"}
              />

              <PartnerAuerswaldIcon
                className={classNames(projectcss.all, sty.svg___650Gm)}
                role={"img"}
              />

              <PartnerStDupontIcon
                className={classNames(projectcss.all, sty.svg__qKGxf)}
                role={"img"}
              />

              <PartnerGenoakademieIcon
                className={classNames(projectcss.all, sty.svg__pdeCb)}
                role={"img"}
              />

              <PartnerGuidoMariaKretschmerIcon
                className={classNames(projectcss.all, sty.svg__i62Rm)}
                role={"img"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__kQddW)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "auto"
                    : "80px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "111px"
                    : "181px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/portfolio/images/logoKastensLuisenhof.png",
                  fullWidth: 181,
                  fullHeight: 79,
                  aspectRatio: undefined
                }}
              />
            </Stack__>
          </Stack__>
          <section
            data-plasmic-name={"painPoints"}
            data-plasmic-override={overrides.painPoints}
            className={classNames(projectcss.all, sty.painPoints)}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__sy6Rp
              )}
            >
              {"Common challenges"}
            </h6>
            <h2
              data-plasmic-name={"titlePainpoints"}
              data-plasmic-override={overrides.titlePainpoints}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.titlePainpoints
              )}
            >
              {
                "You might be familiar with at least one of these challenges, right?"
              }
            </h2>
            <Stack__
              as={"div"}
              data-plasmic-name={"items"}
              data-plasmic-override={overrides.items}
              hasGap={true}
              className={classNames(projectcss.all, sty.items)}
            >
              <BenefitPainPoint
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__m4Cpf
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cNvfu
                  )}
                >
                  {"Ever-growing and cluttered design with poor accessibility"}
                </div>
              </BenefitPainPoint>
              <BenefitPainPoint
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__tzvnW
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x1Zk
                  )}
                >
                  {"Inefficient collaboration between design and development"}
                </div>
              </BenefitPainPoint>
              <BenefitPainPoint
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__nN2F1
                )}
              >
                {
                  "Dissatisfied customers and clients with many negative feedback"
                }
              </BenefitPainPoint>
              <BenefitPainPoint
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__pNeg5
                )}
              >
                {
                  "Complicated user experience with dozens of unused similar features"
                }
              </BenefitPainPoint>
              <BenefitPainPoint
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__bRxMn
                )}
              >
                {
                  "Limited scalability and flexibility to keep up with market change"
                }
              </BenefitPainPoint>
              <BenefitPainPoint
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__fvv7V
                )}
              >
                {"Significant disparity between development and design"}
              </BenefitPainPoint>
            </Stack__>
          </section>
          <section
            data-plasmic-name={"yourPartner"}
            data-plasmic-override={overrides.yourPartner}
            className={classNames(projectcss.all, sty.yourPartner)}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__vqBnh
              )}
            >
              {"your collaborative partner"}
            </h6>
            <h2
              data-plasmic-name={"titlePainpoints3"}
              data-plasmic-override={overrides.titlePainpoints3}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.titlePainpoints3
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Let's make a change by design"
                : hasVariant(globalVariants, "screen", "tablet")
                ? "Let's make a change by design"
                : "Let's make a change by design"}
            </h2>
            <Stack__
              as={"div"}
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              hasGap={true}
              className={classNames(projectcss.all, sty.profile)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__q3Qkk)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "420px"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "auto"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "auto"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "50%"
                    : "50%"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/portfolio/images/profileYourCollaborativePartner.jpg",
                  fullWidth: 673,
                  fullHeight: 673,
                  aspectRatio: undefined
                }}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"aboutPartner"}
                data-plasmic-override={overrides.aboutPartner}
                hasGap={true}
                className={classNames(projectcss.all, sty.aboutPartner)}
              >
                <h6
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6__ua1Ns
                  )}
                >
                  {"10+ years of Experience"}
                </h6>
                <p
                  data-plasmic-name={"introAboutMe"}
                  data-plasmic-override={overrides.introAboutMe}
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.introAboutMe
                  )}
                >
                  {
                    "I'm passionate and here to collaborate as partner to design digital products that solve real-world problems. \n\nTogether, we will streamline collaboration between teams, create an intuitive interface to deliver an irresistible and enhanced experience. The outcome will resonate with your customers' needs and build lasting connection with your business."
                  }
                </p>
                <PlasmicLink__
                  data-plasmic-name={"connectLinkedin"}
                  data-plasmic-override={overrides.connectLinkedin}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.connectLinkedin
                  )}
                  component={Link}
                  href={"https://www.linkedin.com/in/abdulazizcoskun"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  {"Let's connect on LinkedIn"}
                </PlasmicLink__>
              </Stack__>
            </Stack__>
          </section>
          <section
            data-plasmic-name={"designSystem"}
            data-plasmic-override={overrides.designSystem}
            className={classNames(projectcss.all, sty.designSystem)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__p3YHw)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/portfolio/images/dotsDecorationPng.png",
                fullWidth: 2275,
                fullHeight: 2275,
                aspectRatio: undefined
              }}
            />

            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__h6NLy
              )}
            >
              {"Service"}
            </h6>
            <h2
              data-plasmic-name={"titlePainpoints2"}
              data-plasmic-override={overrides.titlePainpoints2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.titlePainpoints2
              )}
            >
              {"Design System"}
            </h2>
            <p
              data-plasmic-name={"introDesignSystem2"}
              data-plasmic-override={overrides.introDesignSystem2}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.introDesignSystem2
              )}
            >
              {
                "Reduce overhead and time to market with clear design guidelines & modular design. Ensure consistency, scalability, and promote seamless collaboration between design and development."
              }
            </p>
            <Stack__
              as={"div"}
              data-plasmic-name={"items2"}
              data-plasmic-override={overrides.items2}
              hasGap={true}
              className={classNames(projectcss.all, sty.items2)}
            >
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__nEwVs
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3MwRi
                  )}
                >
                  {"Boost efficiency between design & development"}
                </div>
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__iYopc
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ufg3
                  )}
                >
                  {"Empower teams to effortlessly adapt to market dynamics"}
                </div>
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__gfrqZ
                )}
              >
                {"Provide consistency between interface und usability"}
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__jOWxw
                )}
              >
                {"Reduce redundant & repetitive tasks"}
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__nev52
                )}
              >
                {"Foster teamwork and streamline collaboration"}
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__ruEti
                )}
              >
                {"Reduce costs and boost overall productivity"}
              </BenefitPainPoint>
            </Stack__>
          </section>
          <section
            data-plasmic-name={"productDesign"}
            data-plasmic-override={overrides.productDesign}
            className={classNames(projectcss.all, sty.productDesign)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__eLtW)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/portfolio/images/dotsDecorationPng.png",
                fullWidth: 2275,
                fullHeight: 2275,
                aspectRatio: undefined
              }}
            />

            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6___234Tv
              )}
            >
              {"Service"}
            </h6>
            <h2
              data-plasmic-name={"titlePainpoints4"}
              data-plasmic-override={overrides.titlePainpoints4}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.titlePainpoints4
              )}
            >
              {"Product Design (UI/IX)"}
            </h2>
            <p
              data-plasmic-name={"introDesignSystem3"}
              data-plasmic-override={overrides.introDesignSystem3}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.introDesignSystem3
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Elevate App/SaaS experience and drive exceptional satisfaction that meets customers needs and business goals. "
                : "Create an intuitive, user-friendly app/saas that not only meet customer needs and business goals but enhance customer productivity and exceed expectations. "}
            </p>
            <Stack__
              as={"div"}
              data-plasmic-name={"items3"}
              data-plasmic-override={overrides.items3}
              hasGap={true}
              className={classNames(projectcss.all, sty.items3)}
            >
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__mlT0A
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ehLXy
                  )}
                >
                  {"Become user-centered to meet customers needs"}
                </div>
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__l60Tx
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rx57K
                  )}
                >
                  {
                    "Emphasize innovation, differentiate from competitors and drive growth"
                  }
                </div>
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint___3KLno
                )}
              >
                {
                  "Focus on quality and reliability to build customer trust and loyalty"
                }
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__zZps
                )}
              >
                {
                  "Minimize complexity to deliver an intuitive and user-friendly experience"
                }
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint___6EX3
                )}
              >
                {"Scale efficiently and adapt to market dynamics"}
              </BenefitPainPoint>
              <BenefitPainPoint
                benefit={true}
                className={classNames(
                  "__wab_instance",
                  sty.benefitPainPoint__tvdmA
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t7IeJ
                  )}
                >
                  {
                    "Reinforce brand alignment and build a strong brand presence"
                  }
                </div>
              </BenefitPainPoint>
            </Stack__>
          </section>
          <Stack__
            as={"div"}
            data-plasmic-name={"letsTalk"}
            data-plasmic-override={overrides.letsTalk}
            hasGap={true}
            className={classNames(projectcss.all, sty.letsTalk)}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__czLaX
              )}
            >
              {"Let's talk"}
            </h6>
            <h2
              data-plasmic-name={"letsTalkTitle"}
              data-plasmic-override={overrides.letsTalkTitle}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.letsTalkTitle
              )}
            >
              {"Take your first step to next level"}
            </h2>
            <p
              data-plasmic-name={"introDesignSystem4"}
              data-plasmic-override={overrides.introDesignSystem4}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.introDesignSystem4
              )}
            >
              {
                "Ready to have a design that resonate with customers and drive meaningful results? Let's collaborate and explore how I can bring a fresh perspective to your app/saas."
              }
            </p>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__alKBz
              )}
              component={Link}
              href={""}
              onClick={async event => {
                const $steps = {};
                $steps["goToMailtoHiAcoskunCom"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "mailto:hi@acoskun.com"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToMailtoHiAcoskunCom"] != null &&
                  typeof $steps["goToMailtoHiAcoskunCom"] === "object" &&
                  typeof $steps["goToMailtoHiAcoskunCom"].then === "function"
                ) {
                  $steps["goToMailtoHiAcoskunCom"] = await $steps[
                    "goToMailtoHiAcoskunCom"
                  ];
                }
              }}
              platform={"nextjs"}
            >
              <ButtonMain
                className={classNames("__wab_instance", sty.buttonMain___2Yyg1)}
                dark={true}
              />
            </PlasmicLink__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  home: [
    "home",
    "headerOld",
    "logo",
    "header",
    "logo2",
    "hero",
    "heroTItle",
    "heroIntro",
    "button",
    "partnersTop",
    "logos",
    "painPoints",
    "titlePainpoints",
    "items",
    "yourPartner",
    "titlePainpoints3",
    "profile",
    "aboutPartner",
    "introAboutMe",
    "connectLinkedin",
    "designSystem",
    "titlePainpoints2",
    "introDesignSystem2",
    "items2",
    "productDesign",
    "titlePainpoints4",
    "introDesignSystem3",
    "items3",
    "letsTalk",
    "letsTalkTitle",
    "introDesignSystem4"
  ],

  headerOld: ["headerOld", "logo"],
  logo: ["logo"],
  header: ["header", "logo2"],
  logo2: ["logo2"],
  hero: ["hero", "heroTItle", "heroIntro", "button"],
  heroTItle: ["heroTItle"],
  heroIntro: ["heroIntro"],
  button: ["button"],
  partnersTop: ["partnersTop", "logos"],
  logos: ["logos"],
  painPoints: ["painPoints", "titlePainpoints", "items"],
  titlePainpoints: ["titlePainpoints"],
  items: ["items"],
  yourPartner: [
    "yourPartner",
    "titlePainpoints3",
    "profile",
    "aboutPartner",
    "introAboutMe",
    "connectLinkedin"
  ],

  titlePainpoints3: ["titlePainpoints3"],
  profile: ["profile", "aboutPartner", "introAboutMe", "connectLinkedin"],
  aboutPartner: ["aboutPartner", "introAboutMe", "connectLinkedin"],
  introAboutMe: ["introAboutMe"],
  connectLinkedin: ["connectLinkedin"],
  designSystem: [
    "designSystem",
    "titlePainpoints2",
    "introDesignSystem2",
    "items2"
  ],

  titlePainpoints2: ["titlePainpoints2"],
  introDesignSystem2: ["introDesignSystem2"],
  items2: ["items2"],
  productDesign: [
    "productDesign",
    "titlePainpoints4",
    "introDesignSystem3",
    "items3"
  ],

  titlePainpoints4: ["titlePainpoints4"],
  introDesignSystem3: ["introDesignSystem3"],
  items3: ["items3"],
  letsTalk: ["letsTalk", "letsTalkTitle", "introDesignSystem4"],
  letsTalkTitle: ["letsTalkTitle"],
  introDesignSystem4: ["introDesignSystem4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    headerOld: makeNodeComponent("headerOld"),
    logo: makeNodeComponent("logo"),
    header: makeNodeComponent("header"),
    logo2: makeNodeComponent("logo2"),
    hero: makeNodeComponent("hero"),
    heroTItle: makeNodeComponent("heroTItle"),
    heroIntro: makeNodeComponent("heroIntro"),
    button: makeNodeComponent("button"),
    partnersTop: makeNodeComponent("partnersTop"),
    logos: makeNodeComponent("logos"),
    painPoints: makeNodeComponent("painPoints"),
    titlePainpoints: makeNodeComponent("titlePainpoints"),
    items: makeNodeComponent("items"),
    yourPartner: makeNodeComponent("yourPartner"),
    titlePainpoints3: makeNodeComponent("titlePainpoints3"),
    profile: makeNodeComponent("profile"),
    aboutPartner: makeNodeComponent("aboutPartner"),
    introAboutMe: makeNodeComponent("introAboutMe"),
    connectLinkedin: makeNodeComponent("connectLinkedin"),
    designSystem: makeNodeComponent("designSystem"),
    titlePainpoints2: makeNodeComponent("titlePainpoints2"),
    introDesignSystem2: makeNodeComponent("introDesignSystem2"),
    items2: makeNodeComponent("items2"),
    productDesign: makeNodeComponent("productDesign"),
    titlePainpoints4: makeNodeComponent("titlePainpoints4"),
    introDesignSystem3: makeNodeComponent("introDesignSystem3"),
    items3: makeNodeComponent("items3"),
    letsTalk: makeNodeComponent("letsTalk"),
    letsTalkTitle: makeNodeComponent("letsTalkTitle"),
    introDesignSystem4: makeNodeComponent("introDesignSystem4"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Product Designer Abdulaziz Coskun",
      description:
        "Intuitive and user-friendly app/saas that not only meet customer needs and business goals but enhance customer productivity and exceed expectations",
      ogImageSrc:
        "https://site-assets.plasmic.app/9e7d948d1fc95fea7fde02bcc5b897fe.jpg",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
