/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 97MbGMxsXsF5gjCjjz3B5V
// Component: SpShSfmOXS
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 97MbGMxsXsF5gjCjjz3B5V/projectcss
import sty from "./PlasmicBenefitPainPoint.module.css"; // plasmic-import: SpShSfmOXS/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: -1vx1Vd8zT/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: ULFiRtCKp2/icon

createPlasmicElementProxy;

export const PlasmicBenefitPainPoint__VariantProps = new Array("benefit");

export const PlasmicBenefitPainPoint__ArgProps = new Array("children");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBenefitPainPoint__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "benefit",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.benefit
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootbenefit]: hasVariant($state, "benefit", "benefit") }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxbenefit]: hasVariant($state, "benefit", "benefit")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Text",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenbenefit]: hasVariant(
              $state,
              "benefit",
              "benefit"
            )
          })
        })}
      </div>
      <IconIcon
        data-plasmic-name={"painPoint"}
        data-plasmic-override={overrides.painPoint}
        className={classNames(projectcss.all, sty.painPoint, {
          [sty.painPointbenefit]: hasVariant($state, "benefit", "benefit")
        })}
        role={"img"}
      />

      <Icon2Icon
        data-plasmic-name={"benefit2"}
        data-plasmic-override={overrides.benefit2}
        className={classNames(projectcss.all, sty.benefit2, {
          [sty.benefit2benefit]: hasVariant($state, "benefit", "benefit")
        })}
        role={"img"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "painPoint", "benefit2"],
  freeBox: ["freeBox"],
  painPoint: ["painPoint"],
  benefit2: ["benefit2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBenefitPainPoint__ArgProps,
          internalVariantPropNames: PlasmicBenefitPainPoint__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBenefitPainPoint__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBenefitPainPoint";
  } else {
    func.displayName = `PlasmicBenefitPainPoint.${nodeName}`;
  }
  return func;
}

export const PlasmicBenefitPainPoint = Object.assign(
  // Top-level PlasmicBenefitPainPoint renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    painPoint: makeNodeComponent("painPoint"),
    benefit2: makeNodeComponent("benefit2"),
    // Metadata about props expected for PlasmicBenefitPainPoint
    internalVariantProps: PlasmicBenefitPainPoint__VariantProps,
    internalArgProps: PlasmicBenefitPainPoint__ArgProps
  }
);

export default PlasmicBenefitPainPoint;
/* prettier-ignore-end */
